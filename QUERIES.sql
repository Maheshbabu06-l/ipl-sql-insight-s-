USE IPLPROJECT;

-- Q1: LIST ALL THE UNIQUE TEAMS THAT HAVE PLAYED IN THE IPL
SELECT DISTINCT(TEAM1) AS TEAMS FROM MATCHES_DATA
UNION
SELECT DISTINCT(TEAM2) AS TEAMS FROM MATCHES_DATA;

-- Q2: FIND THE TOTAL NUMBER OF MATCHES PLAYED IN EACH SEASON
SELECT SEASON, COUNT(*) AS TOTAL_MATCHES_IN_EACH_SEASON
FROM MATCHES_DATA
GROUP BY 1
ORDER BY 1; 

-- Q3: GET THE TOP 5 VENUES WHERE THE MOST MATCHES WERE PLAYED
SELECT VENUE, COUNT(*) AS TOTAL_MATCHES 
FROM MATCHES_DATA 
GROUP BY 1
ORDER BY TOTAL_MATCHES DESC
LIMIT 5;

-- Q4: FIND THE TOTAL NUMBER OF MATCHES EACH TEAM HAS WON (OVERALL, ACROSS ALL SEASONS)
SELECT WINNER AS TEAM, COUNT(*) AS TOTAL_MATCHES_WON
FROM MATCHES_DATA 
WHERE WINNER IS NOT NULL
GROUP BY 1
ORDER BY TOTAL_MATCHES_WON DESC;

-- Q5: GET THE PLAYER WITH THE MOST "PLAYER OF THE MATCH" AWARDS
SELECT * FROM MATCHES_DATA;
SELECT PLAYER_OF_THE_MATCH, COUNT(*) AS TOTAL_AWARDS
FROM MATCHES_DATA 
GROUP BY 1
ORDER BY TOTAL_AWARDS DESC
LIMIT 1;

-- Q6: LIST ALL SEASONS IN WHICH A SPECIFIC TEAM PARTICIPATED
SELECT DISTINCT SEASON, 'MUMBAI INDIANS' AS TEAM_NAME
FROM MATCHES_DATA
WHERE TEAM1 = 'MUMBAI INDIANS'
   OR TEAM2 = 'MUMBAI INDIANS'
ORDER BY SEASON;

-- Q7: FIND THE TOTAL NUMBER OF MATCHES THAT ENDED IN A TIE OR NO RESULT
SELECT COUNT(*) AS TOTAL_NO_OF_MATCHES
FROM MATCHES_DATA
WHERE RESULT IN ('TIE','NO RESULT');

-- Q8: FIND THE BATSMAN WHO HAS SCORED THE MOST RUNS OVERALL
SELECT BATTER, SUM(BATSMAN_RUNS) AS MOST_RUNS_OVERALL
FROM DELIVERIES_DATA
GROUP BY BATTER
ORDER BY MOST_RUNS_OVERALL DESC
LIMIT 1;

-- Q9: FIND THE BOWLER WITH THE MOST WICKETS IN IPL HISTORY
SELECT BOWLER, SUM(IS_WICKET) AS MOST_WICKETS_OVERALL
FROM DELIVERIES_DATA
WHERE IS_WICKET IN (1) 
AND DISMISSAL_KIND NOT IN ('RETIRED OUT','OBSTRUCTING THE FIELD','HIT WICKET','RETIRED HURT','RUN OUT')
GROUP BY 1
ORDER BY MOST_WICKETS_OVERALL DESC
LIMIT 1;

-- Q10: LIST THE TOP 10 BATSMEN WITH THE HIGHEST STRIKE RATE (MINIMUM 200 BALLS FACED)
SELECT BATTER, STRIKE_RATE FROM (
    SELECT BATTER,
           SUM(BATSMAN_RUNS) AS TOTAL_RUNS,
           COUNT(*) AS BALLS_FACED,
           (SUM(BATSMAN_RUNS)*100.0/COUNT(*)) AS STRIKE_RATE
    FROM DELIVERIES_DATA 
    WHERE EXTRAS_TYPE NOT IN ('BYES','LEGBYES','NOBALLS','PENALTY','WIDES')
    GROUP BY BATTER
    HAVING COUNT(*) >= 200
    ORDER BY STRIKE_RATE DESC
    LIMIT 10
) MA;

-- Q11: FIND THE TEAM WITH THE HIGHEST AVERAGE RUNS PER MATCH
SELECT BATTING_TEAM, AVG(TOTAL_RUNS_PER_MATCH) AS AVERAGE_RUNS_PER_MATCH FROM (
    SELECT MATCH_ID, BATTING_TEAM, SUM(TOTAL_RUNS) AS TOTAL_RUNS_PER_MATCH
    FROM DELIVERIES_DATA
    GROUP BY 1,2
) MA
GROUP BY BATTING_TEAM
ORDER BY AVERAGE_RUNS_PER_MATCH DESC
LIMIT 1;

-- Q12: COMPARE WIN PERCENTAGE WHEN BATTING FIRST VS CHASING
SELECT RESULT AS WIN_TYPE,
       COUNT(*) AS MATCHES_WON,
       CONCAT(CAST(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM MATCHES_DATA) AS DECIMAL(10,2)),' %') AS WIN_PERCENTAGE
FROM MATCHES_DATA
GROUP BY 1;

-- Q13: FIND THE BOWLER WITH THE MOST MAIDEN OVERS IN IPL HISTORY
SELECT BOWLER, COUNT(*) AS MAIDEN_OVERS FROM (
    SELECT MATCH_ID, BOWLER, OVERS
    FROM DELIVERIES_DATA
    GROUP BY 1,2,3
    HAVING SUM(TOTAL_RUNS)=0
) MA
GROUP BY BOWLER
ORDER BY MAIDEN_OVERS DESC
LIMIT 1;

-- Q14: IDENTIFY THE BATSMAN WITH THE MOST SIXES IN A SINGLE SEASON
SELECT BATTER, SEASON, COUNT(*) AS TOTAL_SIXES FROM (
    SELECT DELIVERIES_DATA.MATCH_ID, DELIVERIES_DATA.BATTER, MATCHES_DATA.SEASON
    FROM DELIVERIES_DATA
    INNER JOIN MATCHES_DATA ON DELIVERIES_DATA.MATCH_ID = MATCHES_DATA.MATCH_ID
    WHERE DELIVERIES_DATA.BATSMAN_RUNS = 6
) MA
GROUP BY BATTER, SEASON
ORDER BY TOTAL_SIXES DESC
LIMIT 1;

-- Q15: FIND THE BATTER-BOWLER PAIR WHERE THE BOWLER HAS DISMISSED THE BATTER THE MOST TIMES
SELECT BATTER, BOWLER, COUNT(*) AS DISMISSALS 
FROM DELIVERIES_DATA
WHERE IS_WICKET IN (1) 
  AND DISMISSAL_KIND NOT IN ('RUN OUT','RETIRED HURT','HIT WICKET','OBSTRUCTING THE FIELD','RETIRED OUT')
GROUP BY BATTER, BOWLER
ORDER BY DISMISSALS DESC
LIMIT 1;
    
-- Q16: FIND THE TOP 5 MATCHES WITH THE HIGHEST TOTAL RUNS SCORED (BOTH TEAMS COMBINED)
SELECT DELIVERIES_DATA.MATCH_ID AS MATCH_ID,
       MATCHES_DATA.TEAM1 AS TEAM1,
       MATCHES_DATA.TEAM2 AS TEAM2,
       SUM(DELIVERIES_DATA.TOTAL_RUNS) AS TOTAL_RUNS
FROM DELIVERIES_DATA
INNER JOIN MATCHES_DATA ON DELIVERIES_DATA.MATCH_ID = MATCHES_DATA.MATCH_ID
GROUP BY 1,2,3
ORDER BY TOTAL_RUNS DESC
LIMIT 5;

-- Q17: IDENTIFY THE MOST CONSISTENT BATTER BY CALCULATING BATTING AVERAGE ACROSS SEASONS
SELECT BATTER,
SUM(BATSMAN_RUNS) AS TOTAL_RUNS_SCORED,
COUNT(CASE WHEN DISMISSAL_KIND IS NOT NULL THEN 1 END) AS NO_OF_TIMES_OUT,
CONCAT(CAST(SUM(BATSMAN_RUNS)*1.0/NULLIF(COUNT(CASE WHEN DISMISSAL_KIND IS NOT NULL THEN 1 END),0) AS DECIMAL (10,2))," AVG")AS BATTING_AVERAGE
FROM DELIVERIES_DATA
GROUP BY BATTER
ORDER BY BATTING_AVERAGE DESC
LIMIT 1;

-- Q18: FIND THE BOWLER WITH THE BEST ECONOMY RATE IN DEATH OVERS (16â€“20)
SELECT * FROM DELIVERIES_DATA;
SELECT BOWLER,
 SUM(TOTAL_RUNS)AS RUNS_CONCEDED,
COUNT(*) AS BALLS_BOWLED,
CAST(SUM(TOTAL_RUNS)/(COUNT(*)/6)AS DECIMAL(10.2)) AS ECONOMY_RATE
FROM DELIVERIES_DATA
WHERE OVERS BETWEEN 16 AND  20
GROUP BY BOWLER
ORDER BY ECONOMY_RATE 
LIMIT 1;

-- Q19: IDENTIFY WHICH TOSS DECISION (BAT/FIELD) GIVES THE HIGHEST WIN PROBABILITY PER TEAM
SELECT TOSS_WINNER AS TEAM ,TOSS_DECISION,
COUNT(CASE WHEN WINNER=TOSS_WINNER THEN 1 END) AS WINS,
COUNT(*) AS TOTAL_MATCHES,
CONCAT(CAST(COUNT(CASE WHEN WINNER=TOSS_WINNER THEN 1 END) *100.0/COUNT(*) AS DECIMAL(10,2))," %") AS WIN_PROBABILITY
FROM MATCHES_DATA
GROUP BY TOSS_WINNER,TOSS_DECISION
ORDER BY WIN_PROBABILITY DESC;

-- Q20: ANALYZE HOW CHASING SCORES ABOVE 180 AFFECT THE WIN PERCENTAGE OF EACH TEAM
SELECT * FROM MATCHES_DATA;
SELECT TEAM2 AS TEAM,
COUNT(CASE WHEN WINNER=TEAM2 THEN 1 END) AS WINS,
COUNT(*) AS TOTAL_MATCHES,
CONCAT(CAST(COUNT(CASE WHEN WINNER=TEAM2 THEN 1 END)*100.0/COUNT(*)AS DECIMAL(10,2))," %") AS WIN_PERCENTAGE
FROM MATCHES_DATA
WHERE TARGET_RUNS>180
GROUP BY 1
ORDER BY COUNT(CASE WHEN WINNER = TEAM2 THEN 1 END)*100.0/COUNT(*) DESC;

-- Q21: FIND THE PLAYER WHO HAS CONTRIBUTED THE MOST IN MATCH-WINNING PERFORMANCES (COMBINING RUNS AND WICKETS)

SELECT PLAYER,
       SUM(RUNS_CONTRIBUTED) AS SUM_RUNS_CONTRIBUTED,
       SUM(WICKETS_CONTRIBUTED) AS SUM_WICKETS_CONTRIBUTED,
       SUM(RUNS_CONTRIBUTED) + SUM(WICKETS_CONTRIBUTED) AS TOTAL_CONTRIBUTION
FROM (
    SELECT DELIVERIES_DATA.BATTER AS PLAYER,
           SUM(DELIVERIES_DATA.BATSMAN_RUNS) AS RUNS_CONTRIBUTED,
           0 AS WICKETS_CONTRIBUTED
    FROM DELIVERIES_DATA
    INNER JOIN MATCHES_DATA ON DELIVERIES_DATA.MATCH_ID = MATCHES_DATA.MATCH_ID
    WHERE MATCHES_DATA.WINNER IS NOT NULL
    GROUP BY DELIVERIES_DATA.BATTER

    UNION ALL

    SELECT DELIVERIES_DATA.BOWLER AS PLAYER,
           0 AS RUNS_CONTRIBUTED,
           COUNT(*) AS WICKETS_CONTRIBUTED
    FROM DELIVERIES_DATA
    INNER JOIN MATCHES_DATA ON DELIVERIES_DATA.MATCH_ID = MATCHES_DATA.MATCH_ID
    WHERE DELIVERIES_DATA.IS_WICKET IS NOT NULL
      AND MATCHES_DATA.WINNER IS NOT NULL
    GROUP BY DELIVERIES_DATA.BOWLER
) AS PLAYER_CONTRIBUTIONS
GROUP BY PLAYER
ORDER BY TOTAL_CONTRIBUTION DESC
LIMIT 1;


























